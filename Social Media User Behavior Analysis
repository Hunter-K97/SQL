## In this project, I analyze a dataset from a fictional social media platform. I use SQL to extract interesting patterns and insights about user behavior on the platform.
## Notes - This is a fake platform I created the database for using SQLite RDBMS. I used Python code to create INSERT INTO statments to populate my data tables. That code is in my Python Repository on Github.
########################################################################################################################################################################################################################################

-- Creating Users Table
CREATE TABLE Users (
  UserID INTEGER PRIMARY KEY,
  UserName TEXT,
  Country TEXT,
  AccountCreationDate TEXT
);

-- Creating Posts Table
CREATE TABLE Posts (
  PostID INTEGER PRIMARY KEY,
  UserID INTEGER,
  PostDate TEXT,
  PostContent TEXT,
  Likes INTEGER,
  Shares INTEGER,
  FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Creating Comments Table
CREATE TABLE Comments (
  CommentID INTEGER PRIMARY KEY,
  PostID INTEGER,
  UserID INTEGER,
  CommentDate TEXT,
  CommentContent TEXT,
  FOREIGN KEY (PostID) REFERENCES Posts(PostID),
  FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Creating Follows Table
CREATE TABLE Follows (
  FollowID INTEGER PRIMARY KEY,
  FollowerUserID INTEGER,
  FollowedUserID INTEGER,
  FollowDate TEXT,
  FOREIGN KEY (FollowerUserID) REFERENCES Users(UserID),
  FOREIGN KEY (FollowedUserID) REFERENCES Users(UserID)
);

-- Inputting Data into table for analysis with SQL Queries
-- For this section of the project, I used Python to create a command to create the SQL INSERT statements that were required for the data.
-- Below are some Exapmles of some of the lines that Python Output for me
-- INSERT INTO Users (UserID, UserName, Country, AccountCreationDate) VALUES ('1001', 'Daniel Cooke', 'Djibouti', '2021-08-18');
-- INSERT INTO Users (UserID, UserName, Country, AccountCreationDate) VALUES ('1002', 'Dillon Harmon', 'Niger', '2020-11-18');
-- INSERT INTO Follows (FollowID, FollowerUserID, FollowedUserID, FollowDate) VALUES ('1001', '1185', '1475', '2021-04-10');
-- INSERT INTO Follows (FollowID, FollowerUserID, FollowedUserID, FollowDate) VALUES ('1002', '1264', '1186', '2022-02-14');
-- INSERT INTO Posts (PostID, UserID, PostDate, PostContent, Likes, Shares) VALUES ('2499', '1377', '2022-07-08', 'Artist try physical pretty social citizen. Personal social money police article. Daughter no their smile age.
-- specially present process pattern matter. Huge audience point bed hand why.', '978', '214');
-- INSERT INTO Posts (PostID, UserID, PostDate, PostContent, Likes, Shares) VALUES ('2500', '1064', '2021-07-22', 'National employee too information television. Rest major eat for product sign Mrs. Receive create serious full wait red.
-- Security language base all. School ability respond.', '285', '437');
--INSERT INTO Comments (CommentID, PostID, UserID, CommentDate, CommentContent) VALUES ('2499', '1916', '1356', '2022-06-14', 'Moment camera manage international either develop whether. Want group hit bed.
--Production short surface fine. Either traditional great effect.');
--INSERT INTO Comments (CommentID, PostID, UserID, CommentDate, CommentContent) VALUES ('2500', '2144', '1027', '2023-04-22', 'Ability several student few hair. Wonder seven morning religious.
--Government price big sister specific fact. Tonight these see. Both much boy if range the carry.
--Those country energy low audience.')


## Cleaning Data - 

-- Search for Null Values in the tables [All of these queries came up with no results]
SELECT * FROM Comments
WHERE CommentID IS NULL OR PostID IS NULL OR UserID IS NULL OR CommentContent IS NULL;

SELECT * FROM Follows
WHERE FollowID IS NULL OR FollowerUserID IS NULL or FollowedUserID IS NULL OR FollowDate IS NULL;

SELECT * FROM Posts
WHERE PostID IS NULL OR UserID IS NULL or PostDate IS NULL OR PostContent IS NULL OR Likes IS NULL OR Shares IS NULL;

SELECT * FROM Users
WHERE UserID IS NULL OR UserName IS NULL OR Country IS NULL OR AccountCreationDate IS NULL;

-- Checking for Duplicates
SELECT UserName, COUNT(*)
FROM Users
GROUP BY UserName
HAVING COUNT(*) > 1;

-- This tells me we have 7 duplicates user ID's I want to confirm this, so I view the results for UserNames that flagged as duplicates.   
SELECT * FROM USERS
Where UserName = "Barbara Harris" OR UserName = "Bradley Moore" 
OR UserName = "Eric Martin" 
OR UserName = "Heather Williams" 
OR UserName = "Joseph Hall" 
OR UserName = "Joshua Williams" 
OR UserName = "Michael Torres"
ORDER BY UserName Asc;

-- I decide to write some code to replace the duplicate names rather than deleting rows, since the other information in the table is differentiating enough, and this is a fake database anyway
UPDATE Users
SET UserName = 'Billy Jean'
WHERE UserID = 91;

UPDATE Users
SET UserName = 'Dolph Lundgren'
WHERE UserID = 1123;

UPDATE Users
SET UserName = 'Homer Griffin'
WHERE UserID = 1214;

UPDATE Users
SET UserName = 'Eric Salazar'
WHERE UserID = 1098;

UPDATE Users
SET UserName = 'Joseph Legendary'
WHERE UserID = 1183;

UPDATE Users
SET UserName = 'Barney Fred'
WHERE UserID = 1064;

UPDATE Users
SET UserName = 'Joeseph Alvaradez'
WHERE UserID = 1088;

--Now, the above code does not show any duplicates when run again.

## Data Exploration

-- count number of distinct users [Returns 1000, which matches the lines I had the python script create previously.]
SELECT COUNT(DISTINCT UserID)
FROM Users;

-- count number of posts [1500 as previously created]
SELECT COUNT(*)
FROM Posts;

-- Determine the distinct countries representated in the data
SELECT DISTINCT Country
FROM Users;

--



