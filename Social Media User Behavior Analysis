## In this project, I analyze a dataset from a fictional social media platform. I use SQL to extract interesting patterns and insights about user behavior on the platform.
## Notes - This is a fake platform I created the database for using SQLite RDBMS. I used Python code to create INSERT INTO statments to populate my data tables. That code is in my Python Repository on Github.
########################################################################################################################################################################################################################################

-- Creating Users Table
CREATE TABLE Users (
    UserID              INTEGER PRIMARY KEY,
    UserName            TEXT,
    Country             TEXT,
    AccountCreationDate TEXT
);


-- Creating Posts Table
CREATE TABLE Posts (
    PostID      INTEGER PRIMARY KEY,
    UserID      INTEGER,
    PostDate    TEXT,
    PostContent TEXT,
    Likes       INTEGER,
    Shares      INTEGER,
    FOREIGN KEY (
        UserID
    )
    REFERENCES Users (UserID) 
);


-- Creating Comments Table
CREATE TABLE Comments (
    CommentID      INTEGER PRIMARY KEY,
    PostID         INTEGER,
    UserID         INTEGER,
    CommentDate    TEXT,
    CommentContent TEXT,
    FOREIGN KEY (
        PostID
    )
    REFERENCES Posts (PostID),
    FOREIGN KEY (
        UserID
    )
    REFERENCES Users (UserID) 
);


-- Creating Follows Table
CREATE TABLE Follows (
    FollowID       INTEGER PRIMARY KEY,
    FollowerUserID INTEGER,
    FollowedUserID INTEGER,
    FollowDate     TEXT,
    FOREIGN KEY (
        FollowerUserID
    )
    REFERENCES Users (UserID),
    FOREIGN KEY (
        FollowedUserID
    )
    REFERENCES Users (UserID) 
);


-- Inputting Data into table for analysis with SQL Queries
-- For this section of the project, I used Python to create a command to create the SQL INSERT statements that were required for the data.
-- Below are some Exapmles of some of the lines that Python Output for me
-- INSERT INTO Users (UserID, UserName, Country, AccountCreationDate) VALUES ('1001', 'Daniel Cooke', 'Djibouti', '2021-08-18');
-- INSERT INTO Users (UserID, UserName, Country, AccountCreationDate) VALUES ('1002', 'Dillon Harmon', 'Niger', '2020-11-18');
-- INSERT INTO Follows (FollowID, FollowerUserID, FollowedUserID, FollowDate) VALUES ('1001', '1185', '1475', '2021-04-10');
-- INSERT INTO Follows (FollowID, FollowerUserID, FollowedUserID, FollowDate) VALUES ('1002', '1264', '1186', '2022-02-14');
-- INSERT INTO Posts (PostID, UserID, PostDate, PostContent, Likes, Shares) VALUES ('2499', '1377', '2022-07-08', 'Artist try physical pretty social citizen. Personal social money police article. Daughter no their smile age.
-- specially present process pattern matter. Huge audience point bed hand why.', '978', '214');
-- INSERT INTO Posts (PostID, UserID, PostDate, PostContent, Likes, Shares) VALUES ('2500', '1064', '2021-07-22', 'National employee too information television. Rest major eat for product sign Mrs. Receive create serious full wait red.
-- Security language base all. School ability respond.', '285', '437');
--INSERT INTO Comments (CommentID, PostID, UserID, CommentDate, CommentContent) VALUES ('2499', '1916', '1356', '2022-06-14', 'Moment camera manage international either develop whether. Want group hit bed.
--Production short surface fine. Either traditional great effect.');
--INSERT INTO Comments (CommentID, PostID, UserID, CommentDate, CommentContent) VALUES ('2500', '2144', '1027', '2023-04-22', 'Ability several student few hair. Wonder seven morning religious.
--Government price big sister specific fact. Tonight these see. Both much boy if range the carry.
--Those country energy low audience.')

-- Checking for Null Values
SELECT *
  FROM Comments
 WHERE CommentID IS NULL OR 
       PostID IS NULL OR 
       UserID IS NULL OR 
       CommentContent IS NULL;

SELECT *
  FROM Follows
 WHERE FollowID IS NULL OR 
       FollowerUserID IS NULL OR 
       FollowedUserID IS NULL OR 
       FollowDate IS NULL;

SELECT *
  FROM Posts
 WHERE PostID IS NULL OR 
       UserID IS NULL OR 
       PostDate IS NULL OR 
       PostContent IS NULL OR 
       Likes IS NULL OR 
       Shares IS NULL;

SELECT *
  FROM Users
 WHERE UserID IS NULL OR 
       UserName IS NULL OR 
       Country IS NULL OR 
       AccountCreationDate IS NULL;



-- Checking for Duplicates
SELECT UserName,
       COUNT( * ) 
  FROM Users
 GROUP BY UserName
HAVING COUNT( * ) > 1;


-- This tells me we have 7 duplicates user ID's I want to confirm this, so I view the results for UserNames that flagged as duplicates.   
SELECT *
  FROM USERS
 WHERE UserName = "Barbara Harris" OR 
       UserName = "Bradley Moore" OR 
       UserName = "Eric Martin" OR 
       UserName = "Heather Williams" OR 
       UserName = "Joseph Hall" OR 
       UserName = "Joshua Williams" OR 
       UserName = "Michael Torres"
 ORDER BY UserName ASC;

UPDATE Users
   SET UserName = 'Billy Jean'
 WHERE UserID = 91;

UPDATE Users
   SET UserName = 'Dolph Lundgren'
 WHERE UserID = 1123;

UPDATE Users
   SET UserName = 'Homer Griffin'
 WHERE UserID = 1214;

UPDATE Users
   SET UserName = 'Eric Salazar'
 WHERE UserID = 1098;

UPDATE Users
   SET UserName = 'Joseph Legendary'
 WHERE UserID = 1183;

UPDATE Users
   SET UserName = 'Barney Fred'
 WHERE UserID = 1064;

UPDATE Users
   SET UserName = 'Joeseph Alvaradez'
 WHERE UserID = 1088;

SELECT COUNT(DISTINCT UserID) 
  FROM Users;

SELECT COUNT( * ) 
  FROM Posts;

SELECT DISTINCT Country
  FROM Users;


-- Average # of followers per user ID 
SELECT FollowedUserID,
       AVG(FollowerCount) AS AverageFollowers
  FROM (
           SELECT FollowedUserID,
                  COUNT( * ) AS FollowerCount
             FROM Follows
            GROUP BY FollowedUserID
       )
       AS Subquery
 GROUP BY FollowedUserID;


-- find users who have never made a post
SELECT UserID
  FROM Users
 WHERE UserID NOT IN (
           SELECT DISTINCT UserID
             FROM Posts
       );

-- total number of shares per post sorted in descending order 
SELECT PostID,
       SUM(Shares) AS TotalShares
  FROM Posts
 GROUP BY PostID
 ORDER BY TotalShares DESC;


-- Finding the particular post with the most shares based on result of above query

SELECT PostContent,
       UserID,
       Shares
  FROM Posts
       JOIN
       Users ON Users.UserID = Posts.UserID
 WHERE PostID = "1165";


-- Finding the top 5 most active coutries based on number of posts [Brazil]
SELECT Country,
       COUNT( * ) AS PostCount
  FROM Users
       JOIN
       Posts ON Users.UserID = Posts.UserID
 GROUP BY Country
 ORDER BY PostCount DESC
 LIMIT 5;


-- Finding all posts from Brazil using LIKE
SELECT p.PostContent,
       p.PostID,
       p.Likes,
       p.Shares,
       u.UserID,
       u.UserName
  FROM Posts p
       JOIN
       Users u ON p.UserID = u.UserID
 WHERE Country LIKE "brazil%";


-- Next, I do some user analysis
-- This gives me total posts per user
SELECT UserID,
       COUNT( * ) 
  FROM Posts
 GROUP BY UserID;


-- This gives me the top 5 users with the most # of followers
SELECT FollowedUserID,
       COUNT( * ) 
  FROM Follows
 GROUP BY FollowedUserID
 ORDER BY COUNT( * ) DESC
 LIMIT 5;

-- This determines the usre with the highest # of posts
SELECT UserID,
       COUNT( * ) AS PostCount
  FROM Posts
 GROUP BY UserID
 ORDER BY PostCount DESC
 LIMIT 5;

-- This returns the average number of likes per user
SELECT UserID,
       AVG(Likes) AS AverageLikes
  FROM Posts
 GROUP BY UserID;


-- This will give me the user with the highest likes PER post
SELECT UserID,
       COUNT( * ) AS PostCount,
       SUM(Likes) AS TotalLikes,
       SUM(Likes) / COUNT( * ) AS EngagementRate
  FROM Posts
 GROUP BY UserID
 ORDER BY EngagementRate DESC
 LIMIT 5;


-- This calculates average share per user 
SELECT UserID,
       AVG(Shares) AS AverageShares
  FROM Posts
 GROUP BY UserID;


-- Next up, I am going to do some analysis of Posts
-- this SQL will return the average number of posts per day 
SELECT DATE(PostDate),
       COUNT( * ) 
  FROM Posts
 GROUP BY DATE(PostDate);


-- This will find the posts with the most likes
SELECT PostID,
       LIkes
  FROM Posts
 ORDER BY Likes DESC
 LIMIT 5;


-- This will find the posts with the least likes
SELECT PostID,
       LIkes
  FROM Posts
 ORDER BY Likes ASC
 LIMIT 5;


-- Determine the avg. length of posts
SELECT AVG(LENGTH(PostContent) ) AS AverageLength
  FROM Posts;


--identify posts with the highest engagement of likes and shares combined
SELECT PostID,
       (Likes + Shares) AS TotalEngagement
  FROM Posts
 ORDER BY TotalEngagement DESC
 LIMIT 5;


-- find the posts with the most comments
SELECT p.PostID,
       COUNT( * ) AS CommentCount
  FROM Posts p
       JOIN
       Comments c ON p.PostID = c.PostID
 GROUP BY p.PostID
 ORDER BY CommentCount DESC
 LIMIT 5;


-- find avg. number of likes per day for posts
SELECT DATE(PostDate) AS PostDay,
       AVG(Likes) AS AverageLikes
  FROM Posts
 GROUP BY PostDay;



-- finally, i'll do a couple advanced analysis processes on the data
-- determining the most influential users based on likes, shares and followers
SELECT p.UserId,
       AVG(p.Likes) AS AverageLikes,
       Count(f.FollowerUserID) AS FollowerCount
  FROM Posts p
       JOIN
       Follows f ON p.UserID = f.FollowedUserID
 GROUP BY p.UserID
 ORDER BY AverageLikes DESC,
          FollowerCount DESC
 LIMIT 5;


-- Since we determined Brazil had the most users, we are going to determine who has the most engagement from followers in brazil
SELECT p.UserID,
       u.Country,
       SUM(p.Likes + p.Shares) AS TotalEngagement
  FROM posts p
       JOIN
       Follows F ON p.UserID = f.FollowedUserID
       JOIN
       Users u ON f.FollowerUserID = u.UserID
 WHERE u.Country = "Brazil"
 GROUP BY p.UserID,
          u.Country
 ORDER BY TotalEngagement DESC
 LIMIT 10;




