# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# I create a code to determine how many distinct artists there are on the list
SELECT count(distinct Artist_Name) FROM BIT_DB.Spotifydata;

#Next, I filter to high energy songs over a .5 on both danceability and energy, picking those with the highest energy first.

SELECT SD.artist_name,
       SD.track_name,
       SD.danceability,
       SD.energy
  FROM BIT_DB.SpotifyData SD
 WHERE danceability > 0.5 AND 
       energy > 0.5
 ORDER BY Energy DESC;
 
 # Next, I am looking for songs that are in the top 25 Only

SELECT 
SD.artist_name
, SD.track_name
, SD.ID
FROM BIT_DB.SpotifyData SD
WHERE SD.id BETWEEN '1' AND '25';

# Next, I determined the avg popularity, danceability, and energy by artist and track.
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

# Next, I found the 5 least popular artist according to this list based on avg popularity
SELECT
artist_name
, avg(popularity)
FROM BIT_DB.SpotifyData SD
GROUP BY artist_name
ORDER BY avg(popularity) asc LIMIT 5
;

#Next, I found out what artist released the longest song on the list 
SELECT 
SD.artist_name
, SD.track_name
, SD.duration_ms
FROM BIT_DB.SpotifyData SD
ORDER BY SD.duration_ms desc;

# next, I found the avg duration of distinct artist's songs, converting the milliseconds into minutes
SELECT SD.artist_name,
       AVG(SD.duration_ms) / 60000 AS duration_minutes
  FROM BIT_DB.Spotifydata SD
 GROUP BY artist_name
 ORDER BY duration_minutes desc;

# I decide I don't want to listen to songs that are above 4 minutes long, so I filtered those out next.
SELECT SD.artist_name,
       SD.track_name,
       SD.duration_ms / 60000 AS duration_in_minutes
  FROM BIT_DB.SpotifyData SD
  WHERE duration_in_minutes < 4;


# Finally, I modified my danceability and energy level code to remove Bad Bunny and J Balvin, as those are not artists I prefer hearing
SELECT SD.artist_name,
       SD.track_name,
       SD.danceability,
       SD.energy
  FROM BIT_DB.SpotifyData SD
 WHERE danceability > 0.5 AND 
       energy > 0.5
       AND artist_name <> 'Bad Bunny'
       AND artist_name <> 'J Balvin'
 ORDER BY artist_name, danceability
 ;







